classification LARVA_NR
{
	FIRST,
	SUBSEQUENT
};

TIME TsetseFly::timeLarvalProductionEvent()
{
	return next_larva_deposit;
}

void TsetseFly::LarvalProductionEvent()
{
	number_pupa++;
	Pupa *paPupa = new Pupa();
	paPupa->Start();
	first_larvae = SUBSEQUENT;
	next_larva_deposit = WAIT( (TIME) NEXT_LARVA_DEPOSIT( time, larva_const[first_larvae], larva_TempPar[first_larvae] ) );
}

double TsetseFly::NEXT_LARVA_DEPOSIT(double current_time, double k1, double k2)
{
	double inter_larval_period = int(current_time) - current_time;
	double sum = (k1 + k2*( DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) )] - offset ))*inter_larval_period;
	while ( sum < 1 ) 
	{
		sum += k1 + k2*( DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) + int(inter_larval_period) )] - offset );
		inter_larval_period++;
		if (sum > 1)
		{
			double time_reduction = (sum-1)/(k1 + k2*( DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) + int(inter_larval_period) )] - offset ) );
			inter_larval_period = inter_larval_period - time_reduction;
		}
	}
	return inter_larval_period;
 };