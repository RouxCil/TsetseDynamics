parameters
{
	double larva_const[LARVA_NR];
	double larva_TempPar[LARVA_NR];
	double offset;
};

classification LARVA_NR
{
	FIRST,
	SUBSEQUENT
};

actor TsetseFly
{
	TIME next_larva_deposit = {TIME_INFINITE};
	
	LARVA_NR first_larvae = {FIRST};

	event timeLarvalProductionEvent, LarvalProductionEvent;

	double NEXT_LARVA_DEPOSIT(int current_report_time, double k1, double k2);
};

TIME TsetseFly::timeLarvalProductionEvent()
{
	return next_larva_deposit;
}

void TsetseFly::LarvalProductionEvent()
{
	TsetseFly *paTsetseFly = new TsetseFly();
	paTsetseFly->Start();

	first_larvae = SUBSEQUENT;
	next_larva_deposit = WAIT( (TIME) NEXT_LARVA_DEPOSIT( report_time, larva_const[first_larvae], larva_TempPar[first_larvae] ) );
}

double TsetseFly::NEXT_LARVA_DEPOSIT(int current_report_time, double k1, double k2)
{
	double inter_larval_period = 0;
	double sum = 0;
	while ( sum < 1 ) 
	{
		sum += k1 + k2*( DailyAvgTemperature[RANGE_POS( REPORT_TIME, current_report_time + inter_larval_period )] - offset );
		inter_larval_period++;
	}
	return inter_larval_period;
 };