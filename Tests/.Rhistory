ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender)) + geom_point() +geom_line()
ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender)) +
geom_point() + geom_line() + scale_color_grey(start = 0, end = 0.5)
ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender, shape = Gender)) +
geom_point() + geom_line() + scale_color_grey(start = 0, end = 0.5)
CaptureProbability
lm(formula = Capture.Probability~Age+Gender,data = CaptureProbability)
abline(lm(formula = Capture.Probability~Age+Gender,data = CaptureProbability))
plot(lm(formula = Capture.Probability~Age+Gender,data = CaptureProbability))
library(ggplot2)
?geom_smooth
ggplot(CaptureProbability, aes(x=Age, y=Capture.Probability, color=Gender)) + geom_point(shape=1) + geom_smooth(method=lm, se=FALSE,fullrange=T)
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
wt = seq(0, 300, length = 20),
cyl = levels(factor(Gender))
))
grid$mpg <- stats::predict(model, newdata=grid)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 300, length = 20),
Gender = levels(factor(Gender))
))
grid$mpg <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
p
p+geom_point()
grid$mpg <- stats::predict(model, newdata=grid)
grid
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 300, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + Age^2 + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 300, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
model <- lm(Capture.Probability ~ Age + Age^2 + factor(Gender), data = CaptureProbability)
model
model <- lm(Capture.Probability ~ Age + I(Age)^2 + factor(Gender), data = CaptureProbability)
model
model <- lm(Capture.Probability ~ Age + I(Age^2) + factor(Gender), data = CaptureProbability)
model
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + I(Age^2) + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 300, length = 20),
Gender = levels(factor(Gender))
))
grid
grid$Capture.Probability <- stats::predict(model, newdata=grid)
grid
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + I(Age^2) + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 300, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + I(Age^2) + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 90, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity") + geom_smooth()
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(Capture.Probability ~ Age + I(Age^2) + I(Age^3) + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 90, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
model <- lm(log(Capture.Probability) ~ Age + I(Age^2) + I(Age^3) + factor(Gender), data = CaptureProbability)
model
p <- ggplot(CaptureProbability, aes(x = Age, y = Capture.Probability, col = Gender))
model <- lm(log(Capture.Probability) ~ Age + factor(Gender), data = CaptureProbability)
grid <- with(CaptureProbability, expand.grid(
Age = seq(0, 90, length = 20),
Gender = levels(factor(Gender))
))
grid$Capture.Probability <- stats::predict(model, newdata=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
p + geom_point() + geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
p <- ggplot(CaptureProbability, aes(x = Age, y = log(Capture.Probability), col = Gender))
p + geom_point
p + geom_point()
library(MASS)
x <- rgamma(100, shape = 5, rate = 0.1)
fitdistr(x, "gamma")
fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
fitdistr(CaptureProbability$Capture.Probability, "gamma")
model <- fitdistr(CaptureProbability$Capture.Probability, "gamma")
stats::predict(model, newdata=grid)
model <- fitdistr(CaptureProbability$Capture.Probability, "weibull")
model
dweibull(x = 0:50, shape = 2.07, scale = 0.52)
plot(dweibull(x = 0:50, shape = 2.07, scale = 0.52))
?dweibull
plot(0:50,dweibull(x = 0:50, shape = 2.07, scale = 0.52))
plot(0:50,dweibull(x = 0:2.5, shape = 1, scale = 1))
plot(0:3,dweibull(x = 0:3, shape = 1, scale = 1))
plot(0:3,dweibull(x = 0:3, shape = 2.07, scale = 0.52))
CaptureProbability
plot(1:10,rweibull(n = 10, shape = 2.07, scale = 0.52))
plot(1:10,dweibull(n = 10, shape = 2.07, scale = 0.52))
plot(1:10,dweibull(x = seq(1,2,10), shape = 2.07, scale = 0.52))
plot(1:11,dweibull(x = seq(1,2,10), shape = 2.07, scale = 0.52))
seq(1,2,10)
plot(1:11,dweibull(x = seq(1,2, length.out = 10), shape = 2.07, scale = 0.52))
plot(1:10,dweibull(x = seq(1,2, length.out = 10), shape = 2.07, scale = 0.52))
plot(1:10,dweibull(x = seq(0,2, length.out = 10), shape = 2.07, scale = 0.52))
plot(1:10,dweibull(x = seq(0,2, length.out = 10), shape = 1, scale = 1))
fitdistr(CaptureProbability$Capture.Probability, "weibull")
plot(1:10,dweibull(x = seq(0,2, length.out = 10), shape = 2, scale = 1))
plot(0:9,dweibull(x = seq(0,2, length.out = 10), shape = 2, scale = 1))
plot(0:9,dweibull(x = seq(0,2, length.out = 10), shape = 2, scale = 0.5))
plot(0:9,dweibull(x = seq(0,2, length.out = 10), shape = 2.07, scale = 0.5))
plot(0:9,dweibull(x = seq(0.5,2, length.out = 10), shape = 2.07, scale = 0.5))
fitdistr(CaptureProbability$Capture.Probability, dweibull, list(shape = 1, scale = 1.5))
subset(x = CaptureProbability, Gender == 'Male')
subset(x = CaptureProbability, Gender == 'MALE')
subset(x = CaptureProbability, Gender == 'MALE', Capture.Probability)
fitdistr(subset(x = CaptureProbability, Gender == 'MALE', Capture.Probability),
"weibull")
subset(x = CaptureProbability, Gender == 'MALE', Capture.Probability)
x <- subset(x = CaptureProbability, Gender == 'MALE', Capture.Probability)
x
fitdistr(x, "weibull")
c(x)
fitdistr(c(x), "weibull")
unlist(x)
as.matrix(x)
fitdistr(as.matrix(x), "weibull")
plot(0:9,dweibull(x = seq(0.5,2, length.out = 10), shape = 9.4, scale = 0.8))
plot(0:9,dweibull(x = seq(0,2, length.out = 10), shape = 9.4, scale = 0.8))
plot(0:9,dweibull(x = seq(0,2, length.out = 10), shape = 9.45, scale = 0.8))
fitdistr(as.matrix(x), "gamma")
6/24
8.5/24
15.5/24
18/24
15/24
rm(list = ls())
source('C://Users/Roux-Cil//Desktop//Masters File//Modgen//TsetseDynamics//Tests/test_helpers.R')
library(modgenTester)
odbcCloseAll()
sd <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics"
td <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests"
setwd(td)
copy_model(sd, 'TsetseDynamicsD.exe', td)
copy_scenario(sd, 'Base.scex', 'Base(TsetseFlyCore).dat', td)
copy_scenario(sd, 'ConstantT.scex', 'ConstantT(TsetseFlyCore).dat', td)
scenarios_to_create <- list(
'1' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) ),
'2' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20')) ),
'3' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_22'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '22') ) ),
'4' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_24'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '24') ) ),
'5' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_26'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '26') ) ),
'6' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_28'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '28') ) ),
'7' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_30'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '30') ) ),
'8' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32') ) ),
'9' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) )
)
for (i in scenarios_to_create){
do.call(generate_scenario, i)
}
rm(list = ls())
source('C://Users/Roux-Cil//Desktop//Masters File//Modgen//TsetseDynamics//Tests/test_helpers.R')
library(modgenTester)
odbcCloseAll()
sd <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics"
td <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests"
setwd(td)
copy_model(sd, 'TsetseDynamicsD.exe', td)
copy_scenario(sd, 'Base.scex', 'Base(TsetseFlyCore).dat', td)
copy_scenario(sd, 'ConstantT.scex', 'ConstantT(TsetseFlyCore).dat', td)
scenarios_to_create <- list(
'1' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) ),
'2' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20')) ),
'3' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_22'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '22') ) ),
'4' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_24'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '24') ) ),
'5' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_26'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '26') ) ),
'6' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_28'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '28') ) ),
'7' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_30'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '30') ) ),
'8' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32') ) ),
'9' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) )
)
for (i in scenarios_to_create){
do.call(generate_scenario, i)
}
source('C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests/TestResults.R', echo=TRUE)
Tsetse_cohort_Tester(channel = db_channels$Step_20)
rm(list = ls())
source('C://Users/Roux-Cil//Desktop//Masters File//Modgen//TsetseDynamics//Tests/test_helpers.R')
library(modgenTester)
odbcCloseAll()
sd <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics"
td <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests"
setwd(td)
copy_model(sd, 'TsetseDynamicsD.exe', td)
copy_scenario(sd, 'Base.scex', 'Base(TsetseFlyCore).dat', td)
copy_scenario(sd, 'ConstantT.scex', 'ConstantT(TsetseFlyCore).dat', td)
scenarios_to_create <- list(
'1' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) ),
'2' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20')) ),
'3' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_22'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '22') ) ),
'4' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_24'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '24') ) ),
'5' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_26'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '26') ) ),
'6' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_28'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '28') ) ),
'7' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_30'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '30') ) ),
'8' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32') ) ),
'9' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) )
)
for (i in scenarios_to_create){
do.call(generate_scenario, i)
}
source('C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests/TestResults.R', echo=TRUE)
Tsetse_cohort_Tester(channel = db_channels$Step_20)
Tsetse_cohort_Tester(channel = db_channels$Step_20)
rm(list = ls())
source('C://Users/Roux-Cil//Desktop//Masters File//Modgen//TsetseDynamics//Tests/test_helpers.R')
library(modgenTester)
odbcCloseAll()
sd <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics"
td <- "C:/Users/Roux-Cil/Desktop/Masters File/Modgen/TsetseDynamics/Tests"
setwd(td)
copy_model(sd, 'TsetseDynamicsD.exe', td)
copy_scenario(sd, 'Base.scex', 'Base(TsetseFlyCore).dat', td)
copy_scenario(sd, 'ConstantT.scex', 'ConstantT(TsetseFlyCore).dat', td)
scenarios_to_create <- list(
'1' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) ),
'2' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_20'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '20')) ),
'3' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_22'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '22') ) ),
'4' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_24'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '24') ) ),
'5' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_26'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '26') ) ),
'6' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_28'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '28') ) ),
'7' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_30'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '30') ) ),
'8' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32') ) ),
'9' = list(test_folder = td,
base_scenario = 'ConstantT.scex',
base_scenario_dat = 'ConstantT(TsetseFlyCore).dat',
scenario_name_sub = list(from = 'ConstantT', to = 'Step_32_r'),
scex_sub = list(),
dat_sub = list('1' = list(from = '28',
to = '32'),
'2' = list(from = 'Switch_on_random_start = FALSE;',
to = 'Switch_on_random_start = TRUE;') ) )
)
for (i in scenarios_to_create){
do.call(generate_scenario, i)
}
1/3
