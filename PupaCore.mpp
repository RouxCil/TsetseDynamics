parameters 
{
	int		StartingPopulationSize;
	double DailyAvgTemperature[REPORT_TIME];

	double pupa_exp_const[GENDER];
	double pupa_exp_TempPar[GENDER];
	double pupa_numeric_constant[GENDER];

	double pupa_mortality;

	logical Switch_on_random_start;
};

actor_set Pupa asAllPupa;

classification GENDER
{
	MALE,
	FEMALE
};

actor Pupa
{
	TIME adult_emerge = { TIME_INFINITE };
	logical alive = {TRUE};
	logical cohort = {FALSE};

	REPORT_TIME report_time;
	GENDER gender;
	
	void Start();
	void Finish();
	double ADULT_EMERGE( double current_time, double k, double a, double b );
	
	event timeAdultEmerge, AdultEmergeEvent;
	event timeMortality, MortalityEvent;
};

void Pupa::Start()
{
	report_time = int(time) + 1;
	age = 0;
	gender = ( RandUniform(2) <= 0.5 ) ? FEMALE : MALE;
	adult_emerge = WAIT( (TIME) ADULT_EMERGE(time, pupa_numeric_constant[gender], pupa_exp_const[gender], pupa_exp_TempPar[gender]) );
}

void Pupa::Finish()
{
}

TIME Pupa::timeMortality()
{
	TIME death_event = TIME_INFINITE;
	double reschedule = report_time;
	double death_probability = pupa_mortality;
	double pupa_surv_random_number = RandUniform(6);
	if(pupa_surv_random_number < death_probability)
	{
		death_event = WAIT( (TIME) RandUniform(7) );
	}
	return death_event;
}

void Pupa::MortalityEvent()
{
	alive = FALSE;
	Finish();
}