double Survival_Function(int Age, double k1, double k2, double k3, int current_report_time)
{
	double temp = DailyAvgTemperature[RANGE_POS( REPORT_TIME, current_report_time )];
	double prop = exp(k1*temp*(exp(-k2*temp*Age) - exp(k3*temp*Age)));
	return prop;
}

TIME TsetseFly::timeMortality()
{
	TIME death_event = TIME_INFINITE;
	double at_day_age = ceil( time_at_birth ) - time_at_birth;
	double death_probability = 0;
	double survival_probability = Survival_Function(at_day_age, mortality_const[gender], mortality_TempPar[gender] , mortality_AgePar[gender], int( time_at_birth )) / Survival_Function(0, mortality_const[gender], mortality_TempPar[gender] , mortality_AgePar[gender], int( time_at_birth ));
	double rn = RandUniform(1);

	double i = 0;
	while(rn < survival_probability)
	{
		i++;
		at_day_age++;
		death_probability = 1 - Survival_Function(at_day_age, mortality_const[gender], mortality_TempPar[gender] , mortality_AgePar[gender], int( time_at_birth ) + i) / Survival_Function(at_day_age - 1, mortality_const[gender], mortality_TempPar[gender] , mortality_AgePar[gender], int( time_at_birth ) + i);
		survival_probability = survival_probability*(1-death_probability);
	};
	return(WAIT((TIME) at_day_age ));
}

void TsetseFly::MortalityEvent()
{
	alive = FALSE;
	Finish();
}