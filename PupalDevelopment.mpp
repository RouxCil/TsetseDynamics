TIME Pupa::timeAdultEmerge()
{
	return adult_emerge;
}

void Pupa::AdultEmergeEvent()
{
	adult_emerge = TIME_INFINITE;
	TsetseFly *paTsetseFly = new TsetseFly();
	paTsetseFly->Start(gender, cohort);
	Finish();
}

double Pupa::ADULT_EMERGE( double current_time, double k, double a, double b )
{
	double puparial_period = 0;//int(current_time) - current_time;
	double sum =  0;//(k / (1 + exp( a + b * DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) + int(puparial_period) )])))*puparial_period;
	while ( sum < 1 ) 
	{
		sum += k / (1 + exp( a + b * DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) + int(puparial_period) )]));
		puparial_period++;
		if (sum > 1)
		{
			double time_reduction = (sum-1)/( k / (1 + exp( a + b * DailyAvgTemperature[RANGE_POS( REPORT_TIME, int(current_time) + int(puparial_period) )])) );
			puparial_period = puparial_period - time_reduction;
			if(puparial_period - int(puparial_period) >= 0.5)
			{
				puparial_period = ceil( puparial_period );
			} else
			{
				puparial_period = floor( puparial_period );
			}
		}
	}
	return puparial_period;
 };