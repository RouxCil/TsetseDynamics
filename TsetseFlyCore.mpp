parameters
{
	double larva_const[LARVA_NR];
	double larva_TempPar[LARVA_NR];
	double offset;

	double mortality_const[GENDER];
	double mortality_TempPar[GENDER];
	double mortality_AgePar[GENDER];
	double alpha;

	double capture_const[GENDER][AGE_PART];

	logical Switch_on_reproduction;
};

actor_set TsetseFly asAllTsetseFly;

actor TsetseFly
{
	int int_age = self_scheduling_int(age);
	logical alive = {TRUE};
	logical markable;
	logical cohort;
	int previousEventInterval = {-1};
	int indexer = {1};
	int nmarks = {0};
	int number_pupa = {0};
	int age_part = self_scheduling_split(age, AGE_PART);
	double parm = capture_const[gender][age_part];
	TIME next_larva_deposit = {TIME_INFINITE};
	double time_at_birth;

	REPORT_TIME report_time;
	GENDER gender;
	LARVA_NR first_larvae = {FIRST};
	MARK mark1 = {never99};
	MARK mark2 = {never99};
	MARK mark3 = {never99};
	MARK mark4 = {never99};
	MARK mark5 = {never99};
	MARK mark6 = {never99};
	MARK mark7 = {never99};
	MARK mark8 = {never99};
	MARK mark9 = {never99};
	MARK mark10 = {never99};
		
	void Start(GENDER p_gender, logical p_cohort);
	void Finish();
	double NEXT_LARVA_DEPOSIT(double current_time, double k1, double k2);
	
	event timeMortality, MortalityEvent;
	event timeCapture, CaptureEvent;
	event timeLarvalProductionEvent, LarvalProductionEvent;
};

void TsetseFly::Start(GENDER p_gender, logical p_cohort)
{
	age = 0;
	gender = p_gender;
	cohort = p_cohort;
	time_at_birth = time;
	markable = ( int(time) >= 400 ) ? TRUE : FALSE;
	report_time = int(time) + 1;

	if(gender == FEMALE & Switch_on_reproduction )
	{
		next_larva_deposit = WAIT( (TIME) NEXT_LARVA_DEPOSIT( time, larva_const[first_larvae], larva_TempPar[first_larvae] ) );
	}
}

void TsetseFly::Finish()
{
}