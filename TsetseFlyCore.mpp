parameters 
{
	int		StartingPopulationSize;
	double DailyAvgTemperature[ REPORT_TIME ];
};

actor_set TsetseFly asAllTsetseFly;

classification GENDER
{
	PUPA_FEMALE,
	PUPA_MALE,
	ADULT_FEMALE,
	ADULT_MALE
};

actor TsetseFly
{
	int AGE = self_scheduling_int(age);

	REPORT_TIME report_time = {0};
	GENDER gender;
	
	void Start();
	void Finish();
};

void TsetseFly::Start()
{
	age = 0;
	time;
	gender = ( RandUniform(2) <= 0.5 ) ? PUPA_FEMALE : PUPA_MALE;

	if (gender == PUPA_FEMALE || gender == PUPA_MALE)
	{
		adult_emerge = WAIT( (TIME) ADULT_EMERGE(report_time, pupa_numeric_constant[gender], pupa_exp_const[gender], pupa_exp_TempPar[gender]) );
	}
}

void TsetseFly::Finish()
{
}