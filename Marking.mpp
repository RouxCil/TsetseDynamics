partition TIMEGROUPS
{
	407,414,421,428,435,442,449,456,463,470,477,484, //Vol 3
	505,											 //No marking
	512,519,526,533,540,547,554,561,568,575,582,589, //Vol 4
	596,603,610,617,624,631,638,645,652,659,666,673, //Vol 5
	680,687,694,701,708,715,722,729,736,743,750,757,
	764
};

classification MARK
{
	week0,week1,week2,week3,week4,week5,week6,week7,week8,week9,week10,week11,			 //Vol 3
	nomarkingweeks,																		 //No marking
	week12,week13,week14,week15,week16,week17,week18,week19,week20,week21,week22,week23, //Vol 4
	week24,week25,week26,week27,week28,week29,week30,week31,week32,week33,week34,week35, //Vol 5
	week36,week37,week38,week39,week40,week41,week42,week43,week44,week45,week46,week47,
	week48,week49,week50,week51,week52,max53,never99
};

partition AGE_PART
{
	7,14,21,28,35,42,49,56,63,70,77,84,91,98,105,112,119,126,133,140,147,154,161,168,175,182,189,196,203
};

TIME TsetseFly::timeCapture()
{
	TIME mark_event = TIME_INFINITE;
	double capture_random_number = RandUniform(3);
	if(capture_random_number < capture_const[gender][age_part] && markable && age_part != age_part_previous)
	{
		mark_event = WAIT( (TIME) RandUniform(8)*7 );
	}

	return mark_event;
}

void TsetseFly::CaptureEvent()
{
	age_part_previous = SPLIT(age, AGE_PART);
	int curentEventInterval = SPLIT(time, TIMEGROUPS);
	if (curentEventInterval != previousEventInterval)
	{
		switch(nmarks)
		{
		case 0: {mark1 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 1: {mark2 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 2: {mark3 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 3: {mark4 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 4: {mark5 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 5: {mark6 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 6: {mark7 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 7: {mark8 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 8: {mark9 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		case 9: {mark10 = IntTo_MARK( SPLIT(time, TIMEGROUPS) ); }; break;
		};
		nmarks++;
		previousEventInterval = SPLIT(time, TIMEGROUPS);
	};
}
